type Concept {
  name: String! @id @search(by: [hash])
  arguments: [ConceptArgumentType]! @hasInverse(field: concept)
  composition: ConceptComposition @hasInverse(field: concept)
}

type ConceptArgumentType {
  id: ID!
  name: String!
  concept: Concept!
  capacity: String!
}

type ConceptComposition {
  id: ID!
  concept: Concept!
  subConcepts: [Concept]!
  connections: [SubConceptConnection]! @hasInverse(field: conceptComposition)
  coordinates: [SubConceptCoordinates]! @hasInverse(field: conceptComposition)
}

type SubConceptConnection {
  id: ID!
  conceptComposition: ConceptComposition!
  sourceSCIndex: Int!
  sourceSCArgumentType: ConceptArgumentType!
  targetConceptType: String! # 'Self' | 'SC' | 'Argument' | 'SCArgument'
  targetConceptIndex: Int
  targetConceptArgumentIndex: Int
}

type SubConceptCoordinates {
  id: ID!
  conceptComposition: ConceptComposition!
  sourceSCIndex: Int!
  x: Int!
  y: Int!
}
